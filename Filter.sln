#include <vtkUnstructuredGrid.h>
#include <vtkUnstructuredGridReader.h>
#include <vtkXMLUnstructuredGridReader.h>
#include <vtkPointData.h>
#include <vtkActor.h>
#include <vtkCamera.h>
#include <vtkDataSetMapper.h>
#include <vtkNamedColors.h>
#include <vtkNew.h>
#include <vtkProperty.h>
#include <vtkRenderer.h>
#include <vtkSmartPointer.h>
#include <vtkCellLocator.h>
#include <vtkPolyData.h>
#include <vtkRenderWindow.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkXMLPolyDataWriter.h>
#include <string>

namespace {
    vtkSmartPointer<vtkUnstructuredGrid>
        ReadUnstructuredGrid(std::string const& fileName);
}

int main()
{
    vtkNew<vtkNamedColors> colors;
    vtkNew<vtkRenderer> renderer;
    vtkNew<vtkRenderWindow> renderWindow;
    renderWindow->SetSize(640, 480);
    renderWindow->AddRenderer(renderer);
    vtkNew<vtkRenderWindowInteractor> interactor;
    interactor->SetRenderWindow(renderWindow);
    renderer->SetBackground(colors->GetColor3d("Wheat").GetData());
    auto unstructuredGrid = ReadUnstructuredGrid("C:/path/to/file");

    vtkNew<vtkPolyData> inputPolyData;
    inputPolyData->SetPoints(unstructuredGrid->GetPoints());
    inputPolyData->SetPolys(unstructuredGrid->GetCells());

    vtkPoints* pts = vtkPoints::New();
    vtkDataArray* pointdata = unstructuredGrid->GetPointData()->GetArray("Result");
    inputPolyData->GetPointData()->SetScalars(pointdata);

    vtkNew<vtkCellLocator> locator;
    locator->SetDataSet(inputPolyData);
    locator->BuildLocator();

    for (int i = 0; i < pointdata->GetNumberOfTuples(); i++)
    {
        if (*pointdata->GetTuple(i) > 1.5)
        {
            auto pnt = inputPolyData->GetPoint(i);
            vtkIdType cell = locator->FindCell(pnt);
            inputPolyData->DeleteCell(locator->FindCell(pnt));
            pts->InsertNextPoint(pnt[0], pnt[1], pnt[2]);
        }
    }

    inputPolyData->RemoveDeletedCells();

    vtkNew<vtkDataSetMapper> mapper;
    mapper->SetInputData(inputPolyData);
    mapper->SetScalarRange(0, 1);
    vtkNew<vtkActor> actor;
    actor->SetMapper(mapper);
    actor->GetProperty()->SetDiffuseColor(colors->GetColor3d("Tomato").GetData());
    actor->GetProperty()->SetSpecular(.3);
    actor->GetProperty()->SetSpecularPower(30);
    actor->GetProperty()->EdgeVisibilityOn();
    renderer->AddActor(actor);
    renderer->GetActiveCamera()->Azimuth(45);
    renderer->GetActiveCamera()->Elevation(45);
    renderer->ResetCamera();
    renderWindow->SetWindowName("CellFilter");
    renderWindow->Render();
    interactor->Start();

    return 0;
}


namespace {
    vtkSmartPointer<vtkUnstructuredGrid>
        ReadUnstructuredGrid(std::string const& fileName)
    {
        vtkSmartPointer<vtkUnstructuredGrid> unstructuredGrid;
        std::string extension = "";
        if (fileName.find_last_of(".") != std::string::npos)
        {
            extension = fileName.substr(fileName.find_last_of("."));
        }

        std::transform(extension.begin(), extension.end(), extension.begin(),
            ::tolower);

        if (extension == ".vtu")
        {
            vtkNew<vtkXMLUnstructuredGridReader> reader;
            reader->SetFileName(fileName.c_str());
            reader->Update();
            unstructuredGrid = reader->GetOutput();
        }
        else if (extension == ".vtk")
        {
            vtkNew<vtkUnstructuredGridReader> reader;
            reader->SetFileName(fileName.c_str());
            reader->Update();
            unstructuredGrid = reader->GetOutput();
        }

        return unstructuredGrid;
    }
}
