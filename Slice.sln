#include <vtkUnstructuredGrid.h>
#include <vtkUnstructuredGridReader.h>
#include <vtkXMLUnstructuredGridReader.h>


#include <vtkActor.h>
#include <vtkCamera.h>
#include <vtkNamedColors.h>
#include <vtkProperty.h>
#include <vtkRenderer.h>
#include <vtkCellLocator.h>
#include <vtkNew.h>
#include <vtkPointData.h>
#include <vtkPolyDataMapper.h>
#include <vtkRenderWindow.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkPlaneSource.h>
#include <string>

namespace {
    vtkSmartPointer<vtkUnstructuredGrid>
        ReadUnstructuredGrid(std::string const& fileName);
}

bool intersect(double p1[2], double p2[2], double N[2], double pN[2])
{
    double D = -N[0] * pN[0] - N[1] * pN[1] - N[2] * pN[2];
    float up = (D + N[0] * p1[0] + N[1] * p1[1] + N[2] * p1[2]);
    float down = N[0] * (p1[0] - p2[0]) + N[1] * (p1[1] - p2[1]) + N[2] * (p1[2] - p2[2]);

    float mu = up / down;

    if (up >= 0) // Прямая и полскость параллельны
        return false;


    if (mu >= 0 && mu <= 1) // Прямая и полскость пересекаются
        return true;
}

int main()
{
    vtkNew<vtkPlaneSource> planeSource;
    planeSource->SetCenter(0.25, 0.25, 0.25);
    planeSource->SetNormal(1.0, 1.0, 1.0);
    planeSource->Update();


    auto unstructuredGrid = ReadUnstructuredGrid("C:/Users/Barishev/Desktop/quad1.vtk");


    vtkNew<vtkPolyData> inputPolyData;
    inputPolyData->SetPoints(unstructuredGrid->GetPoints());
    inputPolyData->SetPolys(unstructuredGrid->GetCells());

    vtkDataArray* pointdata = unstructuredGrid->GetPointData()->GetArray("Result");
    inputPolyData->GetPointData()->SetScalars(pointdata);

    vtkNew<vtkCellLocator> locator;
    locator->SetDataSet(inputPolyData);
    locator->BuildLocator();

    double D = -planeSource->GetNormal()[0] * planeSource->GetCenter()[0] - planeSource->GetNormal()[1] * planeSource->GetCenter()[1] - planeSource->GetNormal()[2] * planeSource->GetCenter()[2];
    for (int i = 0; i <= inputPolyData->GetNumberOfPoints(); i++)
    {
        double a[3] = { inputPolyData->GetPoint(i)[0], inputPolyData->GetPoint(i)[1], inputPolyData->GetPoint(i)[2] };
        double b[3] = { inputPolyData->GetPoint(i+1)[0], inputPolyData->GetPoint(i+1)[1], inputPolyData->GetPoint(i+1)[2] };
      
        if (intersect(a, b, planeSource->GetNormal(), planeSource->GetCenter())) // Прямая и полскость пересекаются
        {
            auto pnt = inputPolyData->GetPoint(i);
            auto pnt2 = inputPolyData->GetPoint(i + 1);
            inputPolyData->DeleteCell(locator->FindCell(pnt));
            inputPolyData->DeleteCell(locator->FindCell(pnt2));
        }
    }


    inputPolyData->RemoveDeletedCells();


    vtkNew<vtkPolyDataMapper> ipdmapper;
    ipdmapper->SetInputData(inputPolyData);

    vtkNew<vtkActor> ipdactor;
    ipdactor->SetMapper(ipdmapper);
    ipdactor->GetProperty()->SetLineWidth(4);

    vtkNew<vtkPolyDataMapper> planemapper;

    vtkNew<vtkActor> planeactor;
    planeactor->SetMapper(planemapper);


    vtkNew<vtkRenderWindow> renderWindow;
    vtkNew<vtkRenderer> renderer;
    renderWindow->AddRenderer(renderer);
    vtkNew<vtkNamedColors> colors;
    renderer->SetBackground(colors->GetColor3d("Wheat").GetData());
    renderer->AddActor(ipdactor);
    renderer->AddActor(planeactor);
    renderer->GetActiveCamera()->Azimuth(45);
    renderer->GetActiveCamera()->Elevation(45);
    renderer->ResetCamera();

    renderWindow->SetWindowName("Slice");
    renderWindow->Render();
    vtkNew<vtkRenderWindowInteractor> interactor;
    interactor->SetRenderWindow(renderWindow);
    interactor->Start();

    return 0;
}



namespace {
    vtkSmartPointer<vtkUnstructuredGrid>
        ReadUnstructuredGrid(std::string const& fileName)
    {
        vtkSmartPointer<vtkUnstructuredGrid> unstructuredGrid;
        std::string extension = "";
        if (fileName.find_last_of(".") != std::string::npos)
        {
            extension = fileName.substr(fileName.find_last_of("."));
        }

        std::transform(extension.begin(), extension.end(), extension.begin(),
            ::tolower);

        if (extension == ".vtu")
        {
            vtkNew<vtkXMLUnstructuredGridReader> reader;
            reader->SetFileName(fileName.c_str());
            reader->Update();
            unstructuredGrid = reader->GetOutput();
        }
        else if (extension == ".vtk")
        {
            vtkNew<vtkUnstructuredGridReader> reader;
            reader->SetFileName(fileName.c_str());
            reader->Update();
            unstructuredGrid = reader->GetOutput();
        }

        return unstructuredGrid;
    }
}
